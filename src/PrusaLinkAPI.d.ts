/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** api version informations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Version"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** printer informations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Info"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * printer, job and transfer telemetry info
         * @description All values except printer are optional
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            job?: components["schemas"]["StatusJob"];
                            printer: components["schemas"]["StatusPrinter"];
                            transfer?: components["schemas"]["StatusTransfer"];
                            storage?: components["schemas"]["StatusStorage"];
                            camera?: components["schemas"]["StatusCamera"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/job": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * job info
         * @description Returns info about current job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/job/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description job id */
                id: number;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * stop job
         * @description Stop job with given id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description job id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/job/{id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description job id */
                id: number;
            };
            cookie?: never;
        };
        get?: never;
        /**
         * pause job
         * @description Pause job with given id
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description job id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/job/{id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description job id */
                id: number;
            };
            cookie?: never;
        };
        get?: never;
        /**
         * resume job
         * @description Resume job with given id
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description job id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/job/{id}/continue": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description job id */
                id: number;
            };
            cookie?: never;
        };
        get?: never;
        /**
         * continue job
         * @description Continue in job with given id after timelapse capture
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description job id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage": {
        parameters: {
            query?: never;
            header?: {
                /** @description Defines a language of the response */
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        /**
         * storage info
         * @description Returns info about each available file storage (e.g. SD Card or local storage)
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Defines a language of the response */
                    "Accept-Language"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            storage_list?: components["schemas"]["Storage"][];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * transfer info
         * @description Returns info about current transfer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transfer"];
                    };
                };
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/transfer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description transfer id */
                id: number;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * stop transfer
         * @description Stop transfer with given id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description transfer id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/{storage}/{path}": {
        parameters: {
            query?: never;
            header?: {
                /** @description Defines a language of the response */
                "Accept-Language"?: string;
                /** @description Preferred content-type of response - application/json or text/html, all other are returned as text/plain */
                Accept?: string;
            };
            path: {
                /** @description The target storage */
                storage: string;
                /** @description Path to the file */
                path: string;
            };
            cookie?: never;
        };
        /** File or folder metadata */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Defines a language of the response */
                    "Accept-Language"?: string;
                    /** @description Preferred content-type of response - application/json or text/html, all other are returned as text/plain */
                    Accept?: string;
                };
                path: {
                    /** @description The target storage */
                    storage: string;
                    /** @description Path to the file */
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FileInfo"] | components["schemas"]["PrintFileInfo"] | components["schemas"]["FirmwareFileInfo"] | components["schemas"]["FolderInfo"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        /** upload file or create folder */
        put: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Defines a language of the response */
                    "Accept-Language"?: string;
                    /** @description Preferred content-type of response - application/json or text/html, all other are returned as text/plain */
                    Accept?: string;
                    /** @description Length of file to upload */
                    "Content-Length"?: number;
                    /** @description Type of uploaded media */
                    "Content-Type"?: string;
                    /** @description Whether to start printing the file after upload */
                    "Print-After-Upload"?: "?0" | "?1";
                    /** @description Whether to overwrite already existing files */
                    Overwrite?: "?0" | "?1";
                };
                path: {
                    /** @description The target storage */
                    storage: string;
                    /** @description Path to the file */
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/octet-stream": string;
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        /**
         * Start print of file if there's no print job running
         * @description Body is ignored
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Defines a language of the response */
                    "Accept-Language"?: string;
                    /** @description Preferred content-type of response - application/json or text/html, all other are returned as text/plain */
                    Accept?: string;
                };
                path: {
                    /** @description The target storage */
                    storage: string;
                    /** @description Path to the file */
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "*/*"?: never;
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        /** Delete a file or folder */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Defines a language of the response */
                    "Accept-Language"?: string;
                    /** @description Preferred content-type of response - application/json or text/html, all other are returned as text/plain */
                    Accept?: string;
                    /** @description Whether to force delete non-empty folder */
                    Force?: "?0" | "?1";
                };
                path: {
                    /** @description The target storage */
                    storage: string;
                    /** @description Path to the file */
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        options?: never;
        /** file presence and state check */
        head: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Defines a language of the response */
                    "Accept-Language"?: string;
                    /** @description Preferred content-type of response - application/json or text/html, all other are returned as text/plain */
                    Accept?: string;
                };
                path: {
                    /** @description The target storage */
                    storage: string;
                    /** @description Path to the file */
                    path: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description Whether the file or storage is read-only */
                        "Read-Only": boolean;
                        /** @description Whether this file is currently being printed */
                        "Currently-Printed": boolean;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
            };
        };
        patch?: never;
        trace?: never;
    };
    "/api/v1/cameras": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of active cameras and its properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Camera"][];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        /** List of cameras in intended order */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": string[];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cameras/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the camera */
                id: string;
            };
            cookie?: never;
        };
        /** Get current settings and properties of specific camera */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CameraConfig"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** Setup a new camera or fix a broken one */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CameraConfigSet"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        /** Delete a camera */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cameras/snap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a captured image from the default camera */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "image/png": string;
                    };
                };
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                304: components["responses"]["NotModified"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cameras/{id}/snap": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the camera */
                id: string;
            };
            cookie?: never;
        };
        /** Return a captured image from the camera with a given id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "image/png": string;
                    };
                };
                /** @description No Content No Error */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                304: components["responses"]["NotModified"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /**
         * Make a snapshot with the camera
         * @description Can be manually done only during camera initialization or in manual mode
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": unknown;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "image/png": string;
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                408: components["responses"]["RequestTimeout"];
                409: components["responses"]["Conflict"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cameras/{id}/config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the camera */
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Reset settings of a camera */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** Set new settings to a working camera */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CameraConfigSet"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/api/v1/cameras/{id}/connection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the camera */
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a camera to Connect */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                408: components["responses"]["RequestTimeout"];
                409: components["responses"]["Conflict"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        /** Un-register a camera from Connect */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the camera */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/update/{env}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The target environment (prusalink or system) for update */
                env: "prusalink";
            };
            cookie?: never;
        };
        /** Retrieve information about available update of given environment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The target environment (prusalink or system) for update */
                    env: "prusalink";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        "Update-Available"?: boolean;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PrusaLinkPackage"];
                    };
                };
                /** @description No Content */
                204: {
                    headers: {
                        "Update-Available"?: boolean;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                409: components["responses"]["BadRequest"];
            };
        };
        put?: never;
        /** Update given environment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The target environment (prusalink or system) for update */
                    env: "prusalink";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                409: components["responses"]["BadRequest"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Version: {
            /** @example 1.0.0 */
            api: string;
            /** @example 0.7.0 */
            version: string;
            /** @example 1.3.1 */
            printer: string;
            /** @example PrusaLink 0.7.0 */
            text: string;
            /** @example 3.10.1-4697 */
            firmware: string;
            /** @example 0.7.0 */
            sdk?: string;
            /**
             * @description Additional capabilities the printer has. The object is expected to
             *     be extended in the future with more capabilities. The absence of a
             *     capability in the object, or the complete absence of the object
             *     means the printer doesn't support such capability (probably doesn't
             *     even know such capability might exist).
             *
             * @default {}
             */
            capabilities: {
                /**
                 * @description The printer supports uploading GCodes by the PUT method (as
                 *     described in this document). It is capable of doing the PUT and
                 *     HEAD to /api/v1/files/{storage}/{path} and it is capable of
                 *     answering the /api/v1/storage endpoint.
                 *
                 *     In absence of this capability, client MAY opt to try the legacy
                 *     "octoprint" POST to /api/files/{storage}.
                 *
                 * @default false
                 */
                "upload-by-put": boolean;
            };
        };
        Storage: {
            /**
             * @description Name of the storage, based on selected language
             * @example PrusaLink gcodes
             */
            name?: string;
            /**
             * @description Storage source
             * @enum {string}
             */
            type: "LOCAL" | "SDCARD" | "USB";
            /**
             * @description Path to storage (not display path)
             * @example /local
             */
            path: string;
            /**
             * @description Size of all print files in bytes
             * @example 19216842
             */
            print_files?: number;
            /**
             * @description Size of all system files in bytes
             * @example 4242
             */
            system_files?: number;
            /**
             * @description System free space in bytes
             * @example 1921681142
             */
            free_space?: number;
            /**
             * @description System total space in bytes
             * @example 8589934592
             */
            total_space?: number;
            /**
             * @description Whether the storage is available or not
             * @example true
             */
            available: boolean;
            /**
             * @description Whether the storage is read only
             * @example false
             */
            read_only?: boolean;
        };
        Camera: {
            /** @example sh42arta */
            camera_id?: string;
            config?: {
                /** @example /dev/video0 */
                path?: string;
                /** @example Camera L4D */
                name?: string;
                /** @example V4L2 */
                driver?: string;
                /** @example 1280x720 */
                resolution?: string;
            };
            /** @description Camera is successfully connected to PrusaLink */
            connected?: boolean;
            /** @description Camera is detected by PrusaLink, but not saved yet */
            detected?: boolean;
            /** @description Camera configuration is saved in PrusaLink */
            stored?: boolean;
            /** @description Camera is linked to PrusaConnect */
            linked?: boolean;
        };
        /** @description Camera configuration */
        CameraConfig: {
            /**
             * @description Name of the camera
             * @example MuadDib_Camera_1
             */
            name?: string;
            /**
             * @description When the snapshot is taken
             * @enum {string}
             */
            trigger_scheme?: "TEN_SEC" | "THIRTY_SEC" | "SIXTY_SEC" | "EACH_LAYER" | "FIFTH_LAYER" | "MANUAL";
            available_resolutions?: {
                /** @example 640 */
                width?: number;
                /** @example 480 */
                height?: number;
            }[];
            resolution?: {
                /** @example 640 */
                width?: number;
                /** @example 480 */
                height?: number;
            };
            /**
             * @description Focus of the camera (0.0 - 1.0)
             * @example 0.5
             */
            focus?: number;
            capabilities?: ("TRIGGER_SCHEME" | "IMAGING" | "RESOLUTION" | "ROTATION" | "EXPOSURE" | "FOCUS")[];
        };
        /** @description Camera configuration to set */
        CameraConfigSet: {
            /**
             * @description Name of the camera
             * @example MuadDib_Camera_1
             */
            name?: string;
            /**
             * @description When the snapshot is taken
             * @enum {string}
             */
            trigger_scheme?: "TEN_SEC" | "THIRTY_SEC" | "SIXTY_SEC" | "EACH_LAYER" | "FIFTH_LAYER" | "MANUAL";
            resolution?: {
                /** @example 640 */
                width?: number;
                /** @example 640 */
                height?: number;
            };
            /**
             * @description Current rotation of the output image
             * @example 180
             */
            rotation?: number;
            /**
             * @description Focus of the camera (0.0 - 1.0)
             * @example 0.5
             */
            focus?: number;
            /** @example 4.2 */
            exposure?: number;
            /** @example true */
            send_to_connect?: boolean;
        };
        /** @description Basic file info object, common for all files */
        GenericFileInfo: {
            /**
             * @description Short Filename
             * @example SPICE~1.gco
             */
            name: string;
            /** @example false */
            read_only: boolean;
            /**
             * @description Available for files only, not for folders
             * @example 424242
             */
            size?: number;
            /**
             * @description File could be print file, firmware file, other (e.g. configuration) file, or folder
             * @enum {string}
             */
            type: "PRINT_FILE" | "FIRMWARE" | "FILE" | "FOLDER";
            /**
             * @description Timestamp in seconds
             * @example 1648042843
             */
            m_timestamp: number;
            /**
             * @description Long Filename
             * @example Spice_Harvester_0.3mm_PLA_MK3S_12m.gcode
             */
            display_name?: string;
        };
        /** @description Other, not specified files info */
        FileInfo: components["schemas"]["GenericFileInfo"] & {
            refs?: {
                /** @example /api/files/local/file.txt/raw */
                download?: string;
            };
        };
        /** @description Simplified print file info within the folder's children */
        PrintFileInfoBasic: components["schemas"]["GenericFileInfo"] & {
            refs?: components["schemas"]["PrintFileRefs"];
        };
        /** @description Reference links for file thumbnail, icon and download */
        PrintFileRefs: {
            /** @example /api/files/local/examples/Spice_Harvester_0.3mm_PLA_MK3S_42m.gcode/raw */
            download?: string;
            /** @example /api/thumbnails/local/examples/Spice_Harvester_0.3mm_PLA_MK3S_42m.gcode.small.png */
            icon?: string;
            /** @example /api/thumbnails/local/examples/Spice_Harvester_0.3mm_PLA_MK3S_42m.gcode.orig.png */
            thumbnail?: string;
        };
        /** @description Print file metadata parsed from G-code or SL1, all data are optional */
        PrintFileMetadata: {
            /**
             * @description Degrees Celsius
             * @example 60
             */
            bed_temperature?: number;
            "bed_temperature per tool"?: number[];
            /**
             * @description Nozzle temperature, Degrees Celsius
             * @example 215
             */
            temperature?: number;
            "temperature per tool"?: number[];
            /**
             * @description Milimeters
             * @example 0
             */
            brim_width?: number;
            /** @example 42m 42s */
            "estimated printing time (normal mode)"?: string;
            /**
             * @description Seconds
             * @example 25421
             */
            estimated_print_time?: number;
            /** @example 42 */
            faded_layers?: number;
            /** @example 0.57 */
            "filament cost"?: number;
            "filament cost per tool"?: number[];
            /** @example 12.42 */
            "filament used [cm3]"?: number;
            "filament used [cm3] per tool"?: number[];
            /** @example 15.42 */
            "filament used [g]"?: number;
            "filament used [g] per tool"?: number[];
            /** @example 5142.06 */
            "filament used [mm]"?: number;
            "filament used [mm] per tool"?: number[];
            /** @example PLA */
            filament_type?: string;
            "filament_type per tool"?: string[];
            /**
             * @description Percents
             * @example 20%
             */
            fill_density?: string;
            /**
             * @description Seconds
             * @example 5
             */
            initial_exposure_time?: number;
            /**
             * @description Milimeters
             * @example 0.3
             */
            layer_height?: number;
            /** @example PLA Sandstorm Orange */
            material_name?: string;
            /**
             * @description Seconds
             * @example 2
             */
            exposure_time?: number;
            /**
             * @description Seconds
             * @example 3
             */
            max_exposure_time?: number;
            /**
             * @description Seconds
             * @example 3
             */
            max_initial_exposure_time?: number;
            /**
             * @description Seconds
             * @example 3
             */
            min_exposure_time?: number;
            /**
             * @description Seconds
             * @example 1
             */
            min_initial_exposure_time?: number;
            /**
             * @description Milimeters
             * @example 0.4
             */
            nozzle_diameter?: number;
            "nozzle_diameter per tool"?: number[];
            /** @example true */
            normal_percent_present?: boolean;
            /** @example true */
            normal_left_present?: boolean;
            /** @example true */
            quiet_percent_present?: boolean;
            /** @example true */
            quiet_left_present?: boolean;
            /** @example true */
            layer_info_present?: boolean;
            /** @example 4.2 */
            max_layer_z?: number;
            /**
             * @description Seconds
             * @example 2542
             */
            print_time?: number;
            /** @enum {string} */
            printer_model?: "MK3" | "MK3S" | "MINI";
            /** @example PLA */
            support_material?: string;
            /** @example 0 */
            ironing?: number;
            /** @example 124.2 */
            required_resin_ml?: number;
            /** @example ultra_fast */
            profile?: string;
        };
        /** @description Full print file info from the file's detail */
        PrintFileInfo: components["schemas"]["PrintFileInfoBasic"] & {
            meta?: components["schemas"]["PrintFileMetadata"];
        };
        /** @description Simplified firmware file info within the folder's children */
        FirmwareFileInfoBasic: components["schemas"]["GenericFileInfo"] & {
            refs?: {
                /** @example /api/files/local/firmware.hex/raw */
                download?: string;
            };
        };
        /** @description Full firmware file info from the file's detail */
        FirmwareFileInfo: components["schemas"]["FirmwareFileInfoBasic"] & {
            meta?: {
                /** @description Firmware version in text format */
                version?: string;
                printer_type?: number;
                printer_version?: number;
            };
        };
        /** @description Info about the folder and its content, except nested children */
        FolderInfo: components["schemas"]["GenericFileInfo"] & {
            children?: (components["schemas"]["FileInfo"] | components["schemas"]["PrintFileInfoBasic"] | components["schemas"]["FirmwareFileInfoBasic"] | components["schemas"]["FolderInfo"])[];
        };
        Info: {
            /** @example false */
            mmu?: boolean;
            /** @example MuadDib */
            name?: string;
            /** @example Arrakis */
            location?: string;
            /** @example false */
            farm_mode?: boolean;
            /** @example 0.4 */
            nozzle_diameter?: number;
            /** @example 170 */
            min_extrusion_temp?: number;
            /** @example CZPX4720X004XC34242 */
            serial?: string;
            /** @example true */
            sd_ready?: boolean;
            /** @example true */
            active_camera?: boolean;
            /** @example prusa-mk3.lan */
            hostname?: string;
            /** @example /dev/tty */
            port?: string;
            /** @example true */
            network_error_chime?: boolean;
        };
        /** @description Telemetry info about current job, all values are optional */
        StatusJob: {
            /** @example 420 */
            id?: number;
            /**
             * @description Percents
             * @example 42
             */
            progress?: number;
            /**
             * @description Seconds
             * @example 520
             */
            time_remaining?: number;
            /**
             * @description Seconds
             * @example 526
             */
            time_printing?: number;
        };
        /** @description Telemetry info about printer, all values except state are optional */
        StatusPrinter: {
            /** @enum {string} */
            state: "IDLE" | "BUSY" | "PRINTING" | "PAUSED" | "FINISHED" | "STOPPED" | "ERROR" | "ATTENTION" | "READY";
            /** @example 214.9 */
            temp_nozzle?: number;
            /** @example 215 */
            target_nozzle?: number;
            /** @example 59.5 */
            temp_bed?: number;
            /** @example 60 */
            target_bed?: number;
            /**
             * @description Available only when printer is not moving
             * @example 23.2
             */
            axis_x?: number;
            /**
             * @description Available only when printer is not moving
             * @example 24.3
             */
            axis_y?: number;
            /** @example 0.5 */
            axis_z?: number;
            /** @example 95 */
            flow?: number;
            /** @example 100 */
            speed?: number;
            /** @example 420 */
            fan_hotend?: number;
            /** @example 420 */
            fan_print?: number;
            status_printer?: {
                /** @example true */
                ok?: boolean;
                /** @example OK */
                message?: string;
            };
            status_connect?: {
                /** @example true */
                ok?: boolean;
                /** @example OK */
                message?: string;
            };
        };
        /** @description Telemetry info about current transfer status, all values except id and time_transferring are optional */
        StatusTransfer: {
            /** @example 72855542 */
            id: number;
            /** @example 30 */
            time_transferring: number;
            /**
             * @description Percents
             * @example 65.82
             */
            progress?: number;
            /** @example 123084800 */
            data_transferred?: number;
        };
        /** @description Telemetry info about current storage status */
        StatusStorage: {
            /** @example LOCAL */
            name: string;
            /** @example /local */
            path: string;
            /** @example false */
            read_only: boolean;
            /** @example 4202335 */
            free_space?: number;
        };
        /** @description Telemetry info about default working camera, if available */
        StatusCamera: {
            /** @example Ba1kmCbifTa8X */
            id?: string;
        };
        /** @description PrusaLink package version available to update */
        PrusaLinkPackage: {
            /**
             * @description Package version available for update
             * @example 4.2-RC1
             */
            new_version?: string;
        };
        Transfer: {
            /**
             * @example FROM_WEB
             * @enum {string}
             */
            type: "NO_TRANSFER" | "FROM_WEB" | "FROM_CONNECT" | "FROM_PRINTER" | "FROM_SLICER" | "FROM_CLIENT" | "TO_CONNECT" | "TO_CLIENT";
            /**
             * @description Long Filename
             * @example Spice_Harvester_0.3mm_PLA_MK3S_12m.gcode
             */
            display_name: string;
            /** @example /local */
            path: string;
            /** @example https://files.printables.com/media/prints/42/gcodes/42_b42-242-442-8142c-424242/spice_harvester_0.3mm_pla_mk3s_12m.gcode */
            url?: string;
            /**
             * @description Bytes
             * @example 239314
             */
            size?: string;
            /**
             * @description Percents
             * @example 42.25
             */
            progress: number;
            /**
             * @description Transfered data in bytes
             * @example 3276800
             */
            transferred: number;
            /**
             * @description Seconds
             * @example 61
             */
            time_remaining?: number;
            /**
             * @description Seconds
             * @example 42
             */
            time_transferring: number;
            /**
             * @description Whether or not print after finishing transfer (upload)
             * @example false
             */
            to_print: boolean;
        };
        JobSerialPrint: {
            /**
             * @description Whether the printer is printing from the serial line
             * @default false
             */
            serial_print: boolean;
        };
        JobFilePrint: {
            file?: {
                /**
                 * @description Short Filename
                 * @example SPICE~1.gco
                 */
                name: string;
                /**
                 * @description Long Filename
                 * @example Spice_Harvester_0.3mm_PLA_MK3S_12m.gcode
                 */
                display_name?: string;
                /** @example /local */
                path: string;
                /** @example /PrusaLink gcodes */
                display_path?: string;
                /**
                 * @description Bytes
                 * @example 2393142
                 */
                size?: number;
                /**
                 * @description Timestamp in seconds
                 * @example 1648042843
                 */
                m_timestamp: number;
                meta?: components["schemas"]["PrintFileMetadata"];
                refs?: components["schemas"]["PrintFileRefs"];
            };
        };
        Job: (components["schemas"]["JobSerialPrint"] | components["schemas"]["JobFilePrint"]) & {
            /** @example 420 */
            id: number;
            /** @enum {string} */
            state: "PRINTING" | "PAUSED" | "FINISHED" | "STOPPED" | "ERROR";
            /**
             * @description Percents
             * @example 42
             */
            progress: number;
            /**
             * @description Seconds
             * @example 520
             */
            time_remaining?: number;
            /**
             * @description Seconds
             * @example 526
             */
            time_printing: number;
            /**
             * @description Whether the time estimates are accurate or inaccurate
             * @example false
             */
            inaccurate_estimates?: boolean;
        };
        Error: {
            /**
             * @description Prusa error code. Must be string if we will have printer with code for example 04
             * @example 10108
             */
            code?: string;
            /**
             * @description Prusa error text string with prefiled variable macros.
             * @example RESIN TOO LOW
             */
            title: string;
            /**
             * @description Prusa error text string with prefiled variable macros.
             * @example Measured resin volume 22.4 ml is lower than required for this print. Refill the tank and restart the print.
             */
            text: string;
            /**
             * @description Link to the Prusa help page
             * @example https://help.prusa3d.com/en/10108/LHE3Q0I1
             */
            url?: string;
        };
        /**
         * @description Prusa error message (raw_message)
         * @default Project with same name has been already uploaded.
         */
        ResponsePlaintext: string;
    };
    responses: {
        /** @description Not Modified */
        NotModified: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad Request */
        BadRequest: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Request Timeout */
        RequestTimeout: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict */
        Conflict: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unsupported Media Type */
        UnsupportedMediaType: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Server Error */
        InternalServerError: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Implemented */
        NotImplemented: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Service Unavailable */
        ServiceUnavailable: {
            headers: {
                "Content-Location": components["headers"]["Content-Location"];
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["ResponsePlaintext"];
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: {
        /** @description Parameter specifying supported data format from client. PCL has to support it. Slicer doesn't have to use this. If the header is not present, it defaults to text/plain */
        Accept: string;
        /** @description URI path to nice error page. We can send URI to help.prusa3d.com in the future. */
        "Content-Location": string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
